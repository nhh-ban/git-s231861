?readLines
library(tidyverse)
raw_file <- readLines(con = "suites_dw_Table1.txt")
print(raw_file)
head(raw_file)
tail(raw_file)
substr(x = raw_file, start = 1, stop = 4)
substr(x = raw_file, start = 1, stop = 2)
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, start = 1, stop = 3)
substr(x = raw_file, start = 1, stop = 2)
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, start = 1, stop = 3)
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, 1, 3)
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file,start = 1,stop = 3)
?substr
?which
L <-
(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which() %>%
min()
print(L)
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function. The first argument is
# the information that we want to print out. In order to get each element in the
# "raw_file"-vector on a separate line we also provide the sep-argument, where
# we put the "end-of-line"-character "\n". We also need to come up with a file
# name. Replace the question marks:
cat(raw_file, sep = "\n", file = "updated_file")
cat(raw_file, sep = "\n", file = "updated_file")
tail(raw_file)
cat(L, sep = "\n", file = "updated_file")
?cat
cat(1:(L-2), sep = "\n", file = "updated_file")
lines_to_save <- raw_file[1:(L - 2)]
# Specify the file name
file_name <- "variable_descriptions.txt"
# Use cat() to save the lines to a text file
cat(lines_to_save, file = file_name, sep = "\n")
print(lines_to_save)
rm(file_name)
rm(lines_to_save)
saved_lines <- raw_file[1:(L-2)]
cat(saved_lines, sep = "\n", file = "variable_description.txt")
?str_split
variable_names <-
str_split(string = (L-1), pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names <-
str_split(string = (L-2), pattern = "\\|") %>%
unlist() %>%
str_trim()
print(variable_names)
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
print(variable_names)
variable_names <-
str_split(string = raw_file[L-2], pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
?cat()
comma_separated_values <-
variable_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
print(comma_separated_values)
print(variable_names)
comma_separated_values <-
raw_file %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
print(comma_separated_values)
comma_separated_values <-
variable_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
print(comma_separated_values)
print(variable_names)
comma_separated_values <-
raw_file %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
tail(comma_separated_values)
tail(raw_file)
head(comma_separated_values)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
head(comma_separated_values_with_names)
tail(comma_separated_values_with_names)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "Values_w_names.txt")
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "prepared_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("prepared_file.txt")
print(galaxies)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "prepared_file")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("prepared_file")
rm(galaxies)
galaxies <- read_csv("prepared_file")
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "prepared_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("prepared_file.txt")
extracted_names <-
raw_file[, !(names(raw_file) %>%
variable_names)]
extracted_names <-
raw_file[, !(names(raw_file) %>%
variable_names)]
extracted_names <-
raw_file[, !(names(raw_file) %in%
variable_names)]
extracted_names <-
raw_file[, !(names(raw_file) %in%
variable_names)]
extracted_names <-
raw_file[, !(names(raw_file) %in% variable_names)]
rm(galaxies)
head(comma_separated_values)
values_only <- comma_separated_values[-1]
print(values_only)
rm(values_only)
data_values <- raw_file[, !(names(raw_file) %in% variable_names)]
data_values <- raw_file[, !(names(raw_file) %in% saved_lines)]
print(comma_separated_values)
print(variable_names)
cat(raw_file[1:(L-2)], sep = "\n", file = "variable_description.txt")
rm(saved_lines)
comma_separated_values <-
variable_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
print(comma_separated_values)
comma_separated_values <-
raw_file %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
head(comma_separated_values_with_names)
comma_separated_values_with_names <-
c(paste(comma_separated_values, collapse = ","),
raw_file)
print(comma_separated_values_with_names)
substr(x = raw_file,start = 1,stop = 2)
comma_separated_values <-
raw_file[L-1] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
raw_file - raw_file[L-1] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
raw_file[ -(L-1)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
print(comma_separated_values)
comma_separated_values <-
raw_file[ -(variable_names)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
raw_file[ !(variable_names)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
raw_file %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
variable_names %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
head(comma_separated_values_with_names)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "updated_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("udated_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("updated_file.txt")
View(galaxies)
View(galaxies)
comma_separated_values <-
raw_file %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "updated_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("updated_file.txt")
comma_separated_values <-
raw_file[14:length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values <-
raw_file[15:length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "updated_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("updated_file.txt")
View(galaxies)
View(galaxies)
# Skeleton file 2 for Assignment 1 in BAN400.
# -------------------------------------------
# More detailed steps to complete Problem 1.
library(tidyverse)    # Contains most of what we need.
# Read the entire data file into memory using the readLines()-function. Use the
# URL direcly or read the data from the local file that is in the repository.
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "suites_dw_Table1.txt")
# Identify the line number L of the separator line between the column names and
# the rest of the data table.
# Now every line in the file is in its separate element in the character vector
# "raw_file". The next key step is to identify which line contains the separator
# line between the column names and the rest of the table. We have to come up
# with a rule that defines this line. Let us for example say that "L is the
# first line in the data file that starts with '--'". We can extract the first
# two letters of each of the elements in the "raw_data" vector using the
# substr()-function.
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file,start = 1,stop = 2)
# The next step is then to find out *which* line starts with "--", and pick out
# the first one. This can be done in a nice little pipe, where you have to fill
# out the question marks and the missing function names:
#Line for "--" starts at 14.
L <-
(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which() %>%
min()
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function. The first argument is
# the information that we want to print out. In order to get each element in the
# "raw_file"-vector on a separate line we also provide the sep-argument, where
# we put the "end-of-line"-character "\n". We also need to come up with a file
# name. Replace the question marks:
cat(raw_file[1:(L-2)], sep = "\n", file = "variable_description.txt")
# Extract the variable names (i.e. line (L-1)), store the names in a vector.
# This is a little bit dirty. We want to *split* the string in raw_data[L-1]
# *by* the character "|", and then we want to *trim* away all the leading and
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
# Read the data.
# One way to do this is to rewrite the data to a new .csv-file
# with comma-separators for instance using cat() again, with the variable names
# from the step above on the first line (see for instance paste() for collapsing
# that vector to a single string with commas as separators).
# Let us try the approach described above. It is quite transparent, but could
# probably be done quicker. We take the elements in "raw_file" containing data,
# replace all "|" with "," and remove all empty space. The gsub-function is
# super for this kind of search-and-replace. Replace the question mark below.
comma_separated_values <-
raw_file[15:length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# We then just add the variable names (separated with commas) on top, and
# cat()-the whole ting to a .csv-file in the same way as we did with the
# variable descriptions above.
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "updated_file.txt")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("updated_file.txt")
View(galaxies)
View(galaxies)
library(ggplot2)
galaxies %>%
ggplot(aes(x = a_26, y = m_b) +
geom_histogram()
)
galaxies %>%
ggplot(aes(x = galaxies$a_26, y = galaxies$m_b) +
geom_histogram()
)
galaxies %>%
ggplot(aes(x = galaxies$a_26, y = galaxies$m_b) +
geom_histogram()
)
View(galaxies)
galaxies %>%
ggplot(aes(x = a_26, y = m_b) +
geom_histogram()
)
galaxies %>%
ggplot(aes(x = a_26, y = m_b)) +
geom_histogram()
galaxies %>%
ggplot(aes(x = a_26, y = m_b)) +
geom_histogram()
galaxies %>%
ggplot(aes(x = a_26)) +
geom_histogram()
